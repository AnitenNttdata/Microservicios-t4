package com.nttdata.bootcamp;

import java.util.concurrent.SubmissionPublisher;
import java.util.stream.Stream;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties.Streams;

import reactor.core.publisher.Flux;

@SpringBootApplication
public class MicroserviceT4ReactiveApplication {

	public static void main(String[] args) {
		SpringApplication.run(MicroserviceT4ReactiveApplication.class, args);
		
		// Publisher env√≠a mensaje
		/*Flux<String> messageSender = Flux.just("Mi mensaje1","Mi mensaje1","Mi mensaje1");
		
		messageSender.subscribe(subscribe -> System.out.println("Observer 1.Subscribe."),
		                        next ->System.out.println("Observer1.Received" + t),
		                        error ->System.out.println("Observer1.Error:" + e.getMessage()),
		                        completed ->System.out.println("Observer1.Competed"));*/
		
		
		Stream<String> stream = Streams.of("red", "white", "blue");
		Stream<String> upper = stream.map(value -> {
		    System.out.println(value);
		    return value.toUpperCase();
		});
		
		
           	
	}

}
